[{"content":"","permalink":"https://yyqeternal.github.io/first/","summary":"","title":"First"},{"content":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找\nscan总共有这几种命令：scan、sscan、hscan、zscan，分别用于迭代数据库中的：数据库中所有键、集合键、哈希键、有序集合键，命令具体结构如下：\nscan cursor [MATCH pattern] [COUNT count] [TYPE type] sscan key cursor [MATCH pattern] [COUNT count] hscan key cursor [MATCH pattern] [COUNT count] zscan key cursor [MATCH pattern] [COUNT count] 2. scan scan cursor [MATCH pattern] [COUNT count] [TYPE type]，cursor表示游标，指查询开始的位置，count默认为10，查询完后会返回下一个开始的游标，当返回0的时候表示所有键查询完了\n127.0.0.1:6379[2]\u0026gt; scan 0 1) \u0026#34;3\u0026#34; 2) 1) \u0026#34;mystring\u0026#34; 2) \u0026#34;myzadd\u0026#34; 3) \u0026#34;myhset\u0026#34; 4) \u0026#34;mylist\u0026#34; 5) \u0026#34;myset2\u0026#34; 6) \u0026#34;myset1\u0026#34; 7) \u0026#34;mystring1\u0026#34; 8) \u0026#34;mystring3\u0026#34; 9) \u0026#34;mystring4\u0026#34; 10) \u0026#34;myset\u0026#34; 127.0.0.1:6379[2]\u0026gt; scan 3 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;myzadd1\u0026#34; 2) \u0026#34;mystring2\u0026#34; 3) \u0026#34;mylist2\u0026#34; 4) \u0026#34;myhset1\u0026#34; 5) \u0026#34;mylist1\u0026#34; MATCH可以采用模糊匹配找出自己想要查找的键，这里的逻辑是先查出20个，再匹配，而不是先匹配再查询，这里加上count 20是因为默认查出的10个数中可能不能包含所有的相关项，所以把范围扩大到查20个，我这里测试的键总共有15个\n127.0.0.1:6379[2]\u0026gt; scan 0 match mylist* count 20 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; TYPE可以根据具体的结构类型来匹配该类型的键\n127.0.0.1:6379[2]\u0026gt; scan 0 count 20 type list 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; 3. sscan sscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是集合类型的key\n127.0.0.1:6379[2]\u0026gt; sadd myset1 a b c d (integer) 4 127.0.0.1:6379[2]\u0026gt; smembers myset1 1) \u0026#34;d\u0026#34; 2) \u0026#34;a\u0026#34; 3) \u0026#34;c\u0026#34; 4) \u0026#34;b\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;d\u0026#34; 2) \u0026#34;c\u0026#34; 3) \u0026#34;b\u0026#34; 4) \u0026#34;a\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 match a 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;a\u0026#34; 4. hscan hscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是哈希类型的key\n127.0.0.1:6379[2]\u0026gt; hset myhset1 kk1 vv1 kk2 vv2 kk3 vv3 (integer) 3 127.0.0.1:6379[2]\u0026gt; hgetall myhset1 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 127.0.0.1:6379[2]\u0026gt; hscan myhset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 5. zscan zscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是有序集合类型的key\n127.0.0.1:6379[2]\u0026gt; zadd myzadd1 1 zz1 2 zz2 3 zz3 (integer) 3 127.0.0.1:6379[2]\u0026gt; zrange myzadd1 0 -1 withscores 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; 127.0.0.1:6379[2]\u0026gt; zscan myzadd1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; ","permalink":"https://yyqeternal.github.io/redis-scan%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/","summary":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找 scan总共有这几种命令：sca","title":"Redis scan命令学习"},{"content":"","permalink":"https://yyqeternal.github.io/blog/","summary":"","title":"Blog"},{"content":"","permalink":"https://yyqeternal.github.io/life/","summary":"","title":"Life"},{"content":"","permalink":"https://yyqeternal.github.io/read/","summary":"","title":"Read"},{"content":"","permalink":"https://yyqeternal.github.io/links/","summary":"","title":"🤝友链"},{"content":"关于我\n职业 混吃等死 ","permalink":"https://yyqeternal.github.io/about/","summary":"关于我 职业 混吃等死","title":"🙋🏻‍♂️关于"},{"content":"今天，玩了一局游戏遇见一个“武汉第一深情”的人和他聊了几句他说自己是武汉大学水利水电专业大四学生，今年大四02年的。看来我已经老了，我今年是最后一年考研的机会了没有机会再让我浪费时间了，自己已经没有机会了，看到贴吧两个大神90天冲击浙江计算机370+，另外一个80天清华计算机11 C语言 最后360+看了我很感慨自己很废物复习七个月玩了七个月，自己催眠自己说没有关系的，都是笑话，今年24年是最后一年了，还考不上我可能会自己结束生命，实在看不下去自己的废物程度，我也想考11408，今年就先复习争取一个月完成高数和专业课一轮结束，别再拖延了，最后后悔终身，杨永全！希望明年这个时候能有个好结果\n","permalink":"https://yyqeternal.github.io/diary/1/01/01/","summary":"今天，玩了一局游戏遇见一个“武汉第一深情”的人和他聊了几句他说自己是武汉大学水利水电专业大四学生，今年大四02年的。看来我已经老了，我今年是最后一年考研的机会了没有机会再让我浪费时间了，自己已经没有机会了，看到贴吧两个大神90天冲击浙江计算机370+，另外一个80天清华计算机11","title":""},{"content":"利用GitHub Action实现Hugo博客在GitHub Pages自动部署 建站第十一篇 Hugo+Github Pages+Github Action博客方案之三——配置Github Action实现自动发布\n《Hugo + GitHub Action，搭建你的博客自动发布系统》，https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/ Hugo的官方文档《Build Hugo With GitHub Action》，https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action 《利用GitHub Action实现Hugo博客在GitHubPages自动部署》，https://lucumt.info/post/hugo/using-github-action-to-auto-build-deploy/ 《基于 Github Action 自动构建 Hugo 博客》，https://www.lixueduan.com/posts/blog/01-github-action-deploy-hugo/ 《使用 GitHub Actions 自动部署 Hugo 站点》，https://www.fournoas.com/posts/deploy-hugo-site-using-github-actions/ 《Hugo使用Github Action自动部署博客到GithubPages》，https://tomial.github.io/posts/\n使用 Hugo + GitHub Pages 搭建个人博客 https://www.moonkite.cn/category/other/Hugo-+-Github-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#%E8%8F%9C%E5%8D%95%E5%92%8C%E5%AF%B9%E5%BA%94%E7%9A%84%E7%9B%AE%E5%BD%95）\n","permalink":"https://yyqeternal.github.io/%E6%95%99%E7%A8%8B/","summary":"利用GitHub Action实现Hugo博客在GitHub Pages自动部署 建站第十一篇 Hugo+Github Pages+Github Action博客方案之三——配置Github Action实现自动发布 《Hugo + GitHub Action，搭建你的博客自动发布系统》，https://www.pseudoyu.com/zh/2022","title":"教程"},{"content":"程序员最大的悲哀是什么？直达问题 dboy\n这个繁荣的行业，只要你自己不水，可以衣食无忧，努努力还能光环加成，成为别人眼里很酷的那种人，没多少行业如程序员起薪高，也没多少行业如程序员涨薪快，没多少行业如程序员这般智力密集，身边都是挺聪明的人，有的还很有趣，也没多少职场如程序员职场这般少讲政治只讲方案，这是一种相对轻松的活法。\n不过，总有一天你会意识到，无论你觉得自己多酷多“爱”编程，你做的毕竟是底层的工作，”底层“这个词存在是因为事实存在。有不少小伙子妹子拿到Google Offer还离开去干自己的东西（哪怕摔地稀里哗啦的），他们意识里是知道这一层的。虽然你不总是贡献最大价值，但像其它底层职位一样，你总是贡献最大“剩余价值”，因为价值分配的倒金字塔，底部拿走越大，向上（掌握资本的人）输送的越少，所以剩余价值总是个稳稳的正金字塔。\n行业的纵向价值链里，程序员是一个职业，是一个底层的职业，这是事实，不因为你在一线还是三线公司工作而改变。\n所以有本事的程序员，要有打算跳出桎梏，到金字塔上方看一看。程序员是一种有趣有回报的职业，但对一部分（也许很大部分人）来说，离”成全自己”还很远，我二十几岁的时候也觉得我能干到老，但后来我虽然还是爱技术，但另一个声音告诉我，应该去做点别的事情，心里想做的超脱技术的东西，做点不为项目经理服务而为自己好好服务服务的事，那种20岁出头时候的感觉仿佛又回来了。\n为别人做事，是件很容易失去幸福感的事，不管你有多喜欢做这件事，我不知道你们，但对我是这样\n在美国当码农到底有多爽？直达问题 dboy\n发布于 2017-09-19 23:23 ，编辑于 2017-09-20 00:17\n927 人赞同了该回答\n我说一个很具体，很实际的。\n上级。\n美国人没有威权意识，没人觉得自己是Boss就是人上人，不管自己职位多高，大家还是平等相处，上下级的关系主要是互相服务。职权的目的还是做好事。\n中国人血液里有威权意识，官本位，一个基层中层的manager都可以变着法玩弄权力，不把别人当人，而且越是缺乏教育的平民（受过中国教育的，也没多大差别），这种意识越根深蒂固。manipulation搞起来，套路太深。职权的目的，就很难说了。\n我和很阴暗的中国人上级共事过，印象深刻。\n平等 — 我们中国人真的不太懂，也不习惯。但你在正常的美国社会得到的平等，是一件很爽的事。反过来说，中国人因为权力，与美国人因为种族的不平等意识，恶心程度并无不及。\n中国职场，官场有多少废物，把持着权力侵蚀着他们的组织。\n而权力伤害的除了你我，更是你我生活的文化，没有什么比权力更能搞坏风气，搞乱人心了。\n王剑 互联网苹果公司 (Apple Inc.)平台构架师\n美国人没对你显示权威，是因为他藐视你。我在一个十几个白人的组呆过，勾心斗角一点不少，不过所有人都把我当自己人，我开始不理解，后来明白了，因为只有我是小透明。\n2022-07-05\n","permalink":"https://yyqeternal.github.io/%E4%BA%BA%E7%94%9F%E7%BB%8F%E9%AA%8C/","summary":"程序员最大的悲哀是什么？直达问题 dboy 这个繁荣的行业，只要你自己不水，可以衣食无忧，努努力还能光环加成，成为别人眼里很酷的那种人，没多少行业如程序员起薪高，也没多少行业如程序员涨薪快，没多少行业如程序员这般智力密集，身边都是挺聪明的人，有的还很有趣，也没多少职场如程序员职场这般少讲政","title":"人生经验"},{"content":"如何用 GitHub Pages + Hugo 搭建个人博客 Github Pages 是一个可以从你的 Github 源码仓库中直接生成个人、组织或者项目页 面的静态站点托管服务。\nGithub Pages 只能托管静态站点，不能运行服务器端源码，比如 PHP、Java、 Python 或者 Ruby。\nHugo 是用 Go 语言写的静态网站生成器（Static Site Generator）。可以把 Markdown 文件转化成 HTML 文件。\n创建 2 个 GitHub 仓库 博客源仓库 ：储存所有 Markdown 源文件（博客内容），和博客中用到的图 片等。 GitHub Pages 仓库 ：储存由 Hugo 从Markdown 文件生成的 HTML 文 件。 将在 博客源仓库 中 Hugo 生成的静态 HTML 文件部署到远端 GitHub Pages 仓 库 中。 命名 博客源仓库 （whatever you want） 勾选 Pricate ，设置为公开仓库。 勾选添加 README 文件。 我将博客源码分开存放到一个private repo里，也可以将源码放到github pages repo 中，但这样其他人能获取文章的源文件。\n命名 GitHub Pages 仓库，这个仓库必须使用特殊的命名格式 \u0026lt;username.github.io\u0026gt; ， 是自己的 GitHub 的用户名。 勾选 Public ，设置为公开仓库。 勾选添加 README 文件，这会设置 main 分支为仓库的默认主分支，这在后 面提交推送博客内容时很重要。 2.2 创建 GitHub Page 仓库 打开想要在本地储存项目的文件夹（比如我的项目的文件夹是 project ） 2. 克隆 博客源仓库 到项目文件夹，克隆时使用的 HTTPS 仓库链接在这里查看： 3. 克隆博客源仓库到本地 cd project 1. 进入刚刚克隆下来的 博客源仓库 文件夹（比如：我的博客源仓库文件夹名是 BlogSource ，则 cd BlogSource ），在这个文件夹里用 Hugo 创建一个网站文件 夹。 用 Hugo 创建网站文件夹的命令是 hugo new site 网站名字。(比如，我的命名是 BlogSource ) 我是直接创建在博客源码仓库中的。 用 Hugo 创建的网站共有 7 个文件夹和 1 个文件，这些文件分别代表： archetypes ：存放用 hugo 命令新建的 Markdown 文件应用的 front matter 模版 content ：存放内容页面，比如「博客」、「读书笔记」等 layouts ：存放定义网站的样式，写在 layouts 文件下的样式会覆盖安装的主 题中的 layouts 文件同名的样式 static ：存放所有静态文件，如图片 data ：存放创建站点时 Hugo 使用的其他数据 public ：存放 Hugo 生成的静态网页 themes ：存放主题文件 config.toml ：网站配置文件 git clone git@github.com:krislinzhao/BlogSource.git 4. 使用 Hugo 创建网站 cd BlogSource hugo new site BlogSource 可以从 Hugo 社区提供的主题中选择一个喜欢的主题应用在自己的网站中。\n一般在你选择的 Hugo 主题的文档中，都会给出「如何安装这个主题」的命令， 比如我选用的 BlowFish 的文档中给出： 打开刚刚用 Hugo 创建的网站文件夹（我的是 BlogSource），在终端粘贴文档中 给出的安装命令。 这时可以看到在 themes 文件夹中，多出了刚刚安装的主题文件，代表主题安装成 功。 5. 安装和配置 Hugo 主题 5.1 选择 Hugo 主题 5.2 安装 Hugo 主题 一般安装的 Hugo 主题的文件结构中都会有 exampleSite 文件夹，也是你在选择 主题时参考的网站 demo。 把 exampleSite 的文件复制到站点目录，在此基础上进行基础配置 。 非常推荐这 么做，这样做能解决很多「为什么明明跟教程一步一步做下来，显示的结果却不一 样？」的疑惑。（这主要是因为不同的主题模版配置文件不同导致的。） 在把 exampleSite 文件复制到站点目录时，请根据 对应 文件夹进行复制文件 比如 exampleSite 下有 content , static 和 config.toml 3 个文件，就 找到你自己的站点跟目录下这对应的三个文件。在把对应目录中的内容分别复 制过去。 其中在复制 config.toml 的内容时要注意： 5.3 配置 Hugo 主题 baseURL 如果你没有在 GitHub Pages 中设置自定义域名，这里的域名应该填 https://\u0026lt;username\u0026gt;.github.io/ （⚠ 注意：最后的 / 不要忘了加） themes 在 config.toml 中输入这行命令才能启用安装的主题，不过一般这行命令在 你复制 exampleSite 的配置文件信息时，主题作者已经写好了这行。 用 Hugo 创建一篇文章的命令是:\n用这个命令创建的 Markdown 文件会套用 archetypes 文件夹中的 front matter 模 版，在空白处用 Markdown 写入内容。\n其中， draft: true 代表这篇文章是一个草稿，Hugo 不会显示草稿，要在主页显示添 加的文章，可以设置 draft: false ；或者直接删掉这行。\n1. 在发布到网站前可以在本地预览网站或内容的效果，运行命令： 也可以在本地编辑 Markdown 文件时，通过 hugo server 来实时预览显示效 果。 hugo server 运行成功后，可以在 http://localhost:1313/ 中预览网站 使用Github Actions功能实现提交源码后自动发布。\n  baseURL = \u0026#34;https://example.com/\u0026#34; # 把 https://example.com/ 改成自己的域名 themes = \u0026#34;你选择的主题名字\u0026#34;。 # 这一行命令代表启用你安装的主题 6. 用 Hugo 创建文章 hugo new xxx.md 7. 本地调试和预览 hugo server 8. 发布内容 ↑ 生成Personal access tokens 首先点击github头像在下拉栏里进入Setting-\nDeveloper Settings-\u0026gt;Personal access tokens -\u0026gt; tokens (classic)\n选择Generate new token\n点击Generate token生成token，并先复制保存该token。(这个token只有显示一次， 所以一定要复制保存)\n生成Actions secrets 接下来在源码repo中添加上面的personal access token： 进入repo的Settings-\u0026gt;Secrets and variable一栏，选择New repository secret\n8.1 生成Actions secrets 名称自取，Secret复制上面生成的Personal access tokens\n在repo根目录新建嵌套的两个文件夹.github/workflows\n在workflows里新建一个后缀为.yml的配置文件，名字自取。\n8.2 配置actions文件 写进去以下配置（从hugo官方文档修改而来）：\nyml文件中只需要改external_repository为自己的github page仓库， personal_token: ${{ secrets.XXX }} XXX改成上面生成Actions secrets步骤中取得名 称。\n将BlogSource文件夹初始化为 Git 仓库，并设置默认主分支名为 main。这么做的 原因是： GitHub 创建仓库时生成的默认主分支名是 main 用 git init 初始化 Git 仓库时创 建的默认主分支名是 master 将 git init 创建的 master 修改成 main ，再推送给 远端仓库，这样才不会报错。 将 public 文件夹关联远程 GitHub Pages 仓库，使用 GitHub Pages 仓库的 SSH 链接。   name: github pages # 名字自取 on: push: branches: main # 这里的意思是当 main 分支发生 push 的时候，运行下面的 jobs ，这里先改为 g jobs: deploy: # 任务名自取 runs-on: ubuntu-latest # 在什么环境运行任务 steps: uses: actions/checkout@v2 # 引用actions/checkout这个action，与所在的g with: submodules: true # Fetch Hugo themes (true OR recursive) 获取 submod fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod name: Setup Hugo # 步骤名自取 uses: peaceiris/actions-hugo@v2# hugo官方提供的action，用于在任务环境中 with: hugo-version: \u0026rsquo;latest\u0026rsquo; # 获取最新版本的 _hugo extended: true_ name: Build run: hugo \u0026ndash;minify # 使用hugo构建静态网页 name: Deploy uses: peaceiris/actions-gh-pages@v3# 一个自动发布github pages的action with: # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同 re external_repository: krislinzhao/krislinzhao.github.io # 发布到哪 personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }} # 发布到其他re publish_dir: ./public# 注意这里指的是要发布哪个文件夹的内容，而不是指发 publish_branch: main # 发布到哪个branch 8.3推送代码到源码仓库 git init -b main 3. 推送本地文件到远程仓库 推送完成之后到github仓库中的Actions中就可以看到runs运行成功，你的github pages仓库就会有hugo生成的html文件了，然后你就可以通过 https://krislinzhao.github.io 访问你的博客了。\n如何用 GitHub Pages + Hugo 搭建个人博客 Hugo使用Github Action自动部署博客到Github Pages Hugo - Quick Start git remote add origin ggit@github.com:krislinzhao/BlogSource.git git pull --rebase origin main git add. git commit -m \u0026#34;...(修改的信息)\u0026#34; git push origin main 9. Reference 如何用 GitHub Pages + Hugo 搭建个人博客 Hugo使用Github Action自动部署博客到Github Pages Hugo - Quick Start ","permalink":"https://yyqeternal.github.io/%E5%A6%82%E4%BD%95%E7%94%A8-github-pages--hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","summary":"如何用 GitHub Pages + Hugo 搭建个人博客 Github Pages 是一个可以从你的 Github 源码仓库中直接生成个人、组织或者项目页 面的静态站点托管服务。 Github Pages 只能托管静态站点，不能运行服务器端源码，比如 PHP、Java、 Python 或者 Ruby。 Hugo 是用 Go 语言写的静态网站生成器（Static Site Generator）。可以把 Markdown 文件转化成 HTML 文","title":"如何用 GitHub Pages + Hugo 搭建个人博客"},{"content":"如何用 GitHub Pages + Hugo 搭建个人博客\n1.1 什么是 GitHub Pages？\nGithub Pages 是一个可以从你的 Github 源码仓库中直接生成个人、组织或者项目页面的静态站点托管服务。\nGithub Pages 只能托管静态站点，不能运行服务器端源码，比如 PHP、Java、Python 或者 Ruby。\n1.2 什么是 Hugo？\nHugo 是用 Go 语言写的静态网站生成器（Static Site Generator）。可以把 Markdown 文件转化成 HTML 文件。\n1.3 网站搭建思路\n创建 2 个 GitHub 仓库 博客源仓库：储存所有 Markdown 源文件（博客内容），和博客中用到的图片等。 GitHub Pages 仓库：储存由 Hugo 从Markdown 文件生成的 HTML 文件。 将在博客源仓库中 Hugo 生成的静态 HTML 文件部署到远端 GitHub Pages 仓库中。 2. 创建 GitHub 仓库\n2.1 创建博客源仓库\n命名博客源仓库（whatever you want） 勾选 Pricate，设置为公开仓库。 勾选添加 README 文件。 我将博客源码分开存放到一个private repo里，也可以将源码放到github pages repo中，但这样其他人能获取文章的源文件。\n2.2 创建 GitHub Page 仓库\n命名 GitHub Pages 仓库，这个仓库必须使用特殊的命名格式 \u0026lt;username.github.io\u0026gt;， 是自己的 GitHub 的用户名。 勾选 Public，设置为公开仓库。 勾选添加 README 文件，这会设置 main 分支为仓库的默认主分支，这在后面提交推送博客内容时很重要。\n克隆博客源仓库到本地 打开想要在本地储存项目的文件夹（比如我的项目的文件夹是 project ）\ncd project 克隆博客源仓库到项目文件夹，克隆时使用的 HTTPS 仓库链接在这里查看：\ngit clone git@github.com:krislinzhao/BlogSource.git 4. 使用 Hugo 创建网站\n进入刚刚克隆下来的博客源仓库文件夹（比如：我的博客源仓库文件夹名是 BlogSource，则cd BlogSource ），在这个文件夹里用 Hugo 创建一个网站文件夹。\n用 Hugo 创建网站文件夹的命令是 hugo new site 网站名字。(比如，我的命名是 BlogSource)\ncd BlogSource hugo new site BlogSource 我是直接创建在博客源码仓库中的。\n用 Hugo 创建的网站共有 7 个文件夹和 1 个文件，这些文件分别代表：\narchetypes：存放用 hugo 命令新建的 Markdown 文件应用的 front matter 模版 content：存放内容页面，比如「博客」、「读书笔记」等 layouts：存放定义网站的样式，写在layouts文件下的样式会覆盖安装的主题中的 layouts文件同名的样式 static：存放所有静态文件，如图片 data：存放创建站点时 Hugo 使用的其他数据 public：存放 Hugo 生成的静态网页 themes：存放主题文件 config.toml：网站配置文件 5. 安装和配置 Hugo 主题\n5.1 选择 Hugo 主题\n可以从 Hugo 社区提供的主题中选择一个喜欢的主题应用在自己的网站中。\n5.2 安装 Hugo 主题\n一般在你选择的 Hugo 主题的文档中，都会给出「如何安装这个主题」的命令，比如我选用的 BlowFish 的文档中给出：\n打开刚刚用 Hugo 创建的网站文件夹（我的是 BlogSource），在终端粘贴文档中给出的安装命令。\n这时可以看到在themes文件夹中，多出了刚刚安装的主题文件，代表主题安装成功。\n5.3 配置 Hugo 主题\n一般安装的 Hugo 主题的文件结构中都会有 exampleSite 文件夹，也是你在选择主题时参考的网站 demo。\n把 exampleSite 的文件复制到站点目录，在此基础上进行基础配置。 非常推荐这么做，这样做能解决很多「为什么明明跟教程一步一步做下来，显示的结果却不一样？」的疑惑。（这主要是因为不同的主题模版配置文件不同导致的。）\n在把exampleSite文件复制到站点目录时，请根据对应文件夹进行复制文件\n比如exampleSite下有 content , static 和 config.toml 3 个文件，就找到你自己的站点跟目录下这对应的三个文件。在把对应目录中的内容分别复制过去。 其中在复制config.toml的内容时要注意：\nbaseURL baseURL = \u0026ldquo;https://example.com/\u0026quot; #把https://example.com/改成自己的域名 如果你没有在 GitHub Pages 中设置自定义域名，这里的域名应该填 https://.github.io/ （⚠️ 注意：最后的/不要忘了加） themes themes = \u0026ldquo;你选择的主题名字\u0026rdquo;。 #这一行命令代表启用你安装的主题 在 config.toml 中输入这行命令才能启用安装的主题，不过一般这行命令在你复制 exampleSite 的配置文件信息时，主题作者已经写好了这行。 6. 用 Hugo 创建文章\n用 Hugo 创建一篇文章的命令是:\nhugo new xxx.md 用这个命令创建的 Markdown 文件会套用 archetypes 文件夹中的 front matter 模版，在空白处用 Markdown 写入内容。\n其中，draft: true代表这篇文章是一个草稿，Hugo 不会显示草稿，要在主页显示添加的文章，可以设置 draft: false；或者直接删掉这行。\n本地调试和预览 在发布到网站前可以在本地预览网站或内容的效果，运行命令： hugo server 也可以在本地编辑 Markdown 文件时，通过 hugo server 来实时预览显示效果。 hugo server 运行成功后，可以在 http://localhost:1313/ 中预览网站\n发布内容 使用Github Actions功能实现提交源码后自动发布。\n8.1 生成Actions secrets\n生成Personal access tokens 首先点击github头像在下拉栏里进入Setting-\u0026gt;Developer Settings-\u0026gt;Personal access tokens -\u0026gt; tokens (classic)\n选择Generate new token\n点击Generate token生成token，并先复制保存该token。(这个token只有显示一次，所以一定要复制保存) 生成Actions secrets 接下来在源码repo中添加上面的personal access token： 进入repo的Settings-\u0026gt;Secrets and variable一栏，选择New repository secret\n名称自取，Secret复制上面生成的Personal access tokens\n8.2 配置actions文件\n在repo根目录新建嵌套的两个文件夹.github/workflows\n在workflows里新建一个后缀为.yml的配置文件，名字自取。\n写进去以下配置（从hugo官方文档修改而来）：\nname: github pages # 名字自取\non: push: branches: - main # 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions\njobs: deploy: # 任务名自取 runs-on: ubuntu-latest\t# 在什么环境运行任务 steps: - uses: actions/checkout@v2\t# 引用actions/checkout这个action，与所在的github仓库同名 with: submodules: true # Fetch Hugo themes (true OR recursive) 获取submodule主题 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod\n- name: Setup Hugo\t# 步骤名自取 uses: peaceiris/actions-hugo@v2\t# hugo官方提供的action，用于在任务环境中获取hugo with: hugo-version: 'latest'\t# 获取最新版本的hugo # extended: true - name: Build run: hugo --minify\t# 使用hugo构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3\t# 一个自动发布github pages的action with: # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo external_repository: krislinzhao/krislinzhao.github.io\t# 发布到哪个repo personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }}\t# 发布到其他repo需要提供上面生成的personal access token publish_dir: ./public\t# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main\t# 发布到哪个branch yml文件中只需要改external_repository为自己的github page仓库，personal_token: ${{ secrets.XXX }} XXX改成上面生成Actions secrets步骤中取得名称。\n8.3推送代码到源码仓库\n将BlogSource文件夹初始化为 Git 仓库，并设置默认主分支名为 main。这么做的原因是：\nGitHub 创建仓库时生成的默认主分支名是 main 用 git init 初始化 Git 仓库时创建的默认主分支名是 master 将 git init 创建的 master 修改成 main ，再推送给远端仓库，这样才不会报错。\ngit init -b main 将 public 文件夹关联远程 GitHub Pages 仓库，使用 GitHub Pages 仓库的 SSH 链接。\ngit remote add origin ggit@github.com:krislinzhao/BlogSource.git 推送本地文件到远程仓库\ngit pull \u0026ndash;rebase origin main git add . git commit -m \u0026ldquo;\u0026hellip;(修改的信息)\u0026rdquo; git push origin main 推送完成之后到github仓库中的Actions中就可以看到runs运行成功，你的github pages仓库就会有hugo生成的html文件了，然后你就可以通过 https://krislinzhao.github.io 访问你的博客了。\nReference 如何用 GitHub Pages + Hugo 搭建个人博客 Hugo使用Github Action自动部署博客到Github Pages Hugo - Quick Start- ","permalink":"https://yyqeternal.github.io/%E4%B8%89%E5%88%86%E9%92%9F%E5%BB%BA%E7%AB%99/","summary":"如何用 GitHub Pages + Hugo 搭建个人博客 1.1 什么是 GitHub Pages？ Github Pages 是一个可以从你的 Github 源码仓库中直接生成个人、组织或者项目页面的静态站点托管服务。 Github Pages 只能托管静态站点，不能运行服务器端源码，比如 PHP、Java、Python 或者 Ruby。 1.2 什么是 Hugo？ Hugo 是用 Go 语言写的静态网站生成器（Stat","title":"三分钟建站"}]